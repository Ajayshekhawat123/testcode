def aws_get_session(profile_name:str="", session=None):
    """ Get session
    Docs::
     
        1) From local cache  .aws/cli/cache .aws/cli/boto
        2) From ENV Variable: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY
        Returns: Boto3 session
    """
    from botocore import credentials
    import botocore.session
    import glob, boto3

    if session is not None :
        return session

    if os.environ.get('USE_LOCALSTACK_BOTO3', "0") == "1" :
       import localstack_client.session as boto3 
       client = boto3.Session(botocore_session=session)
       return client

    for fi in [ '.aws/cli/cache', '.aws/boto/cache' ]:
        # By default the cache path is ~/.aws/boto/cache
        cli_cache = os.path.join(os.path.expanduser('~'), fi)
        if len(glob.glob(cli_cache + "/*" ) ) > 0 :
            # Construct botocore session with cache
            session = botocore.session.get_session()
            session.get_component('credential_provider').get_provider('assume-role').cache = credentials.JSONFileCache(cli_cache)

            # Create boto3 client from session
            client = boto3.Session(botocore_session=session)
            log2("Using ", fi, client)
            return client
 

    client = boto3.Session( aws_access_key_id = os.environ.get('AWS_ACCESS_KEY_ID', None) ,
                            aws_secret_access_key= os.environ.get('AWS_SECRET', None),
                            region_name= os.environ.get('AWS_DEFAULT_REGION', 'ap-northeast-1'))

    log2("using ENV Variables ", client)
    return client

  
 def glob_s3_files(path:str, suffix:str="", start_date:str="", end_modified_date:str="", session=None ):
    """ Glob for directory
    Docs:

        path (str) – S3 path (e.g. s3://bucket/prefix).
        suffix (Union[str, List[str], None]) – Suffix or List of suffixes for filtering S3 keys.
        ignore_suffix (Union[str, List[str], None]) – Suffix or List of suffixes for S3 keys to be ignored.
        last_modified_begin – Filter the s3 files by the Last modified date of the object. The filter is applied only after list all s3 files.
        last_modified_end (datetime, optional) – Filter the s3 files by the Last modified date of the object. The filter is applied only after list all s3 files.
        ignore_empty (bool) – Ignore files with 0 bytes.
        chunked (bool) – If True returns iterator, and a single list otherwise. False by default.
        s3_additional_kwargs (Optional[Dict[str, Any]]) – Forwarded to botocore requests. e.g. s3_additional_kwargs = {‘RequestPayer’: ‘requester’}
        boto3_session (boto3.Session(), optional) – Boto3 Session. The default boto3 session will be used if boto3_session receive None.

    Returns: List
    """
    import awswrangler as wr
    session = aws_get_session()  if session is None else session
    path = s3_path_norm(path)
    flist_fullpath = wr.s3.list_objects(path, boto3_session= session )
    return  flist_fullpath
  
  
    
def pl_read_file_s3(path_s3="s3://mybucket/folder/*01*.parquet", suffix=None,npool=2, dataset=False,show=0, nrows=1000000000, session=None,
                    lower_level=0, upper_level=0,**kw):
    """ Read files into Polars
    """
    import polars as pl
    import pyarrow.parquet as pq
    import s3fs

    session = aws_get_session()  if session is None else session
    fs = s3fs.S3FileSystem(session=session)
    flist = glob_s3_files(path_s3, session = session)

    dfall= None
    for filei in flist:
        if filei.endswith(".parquet"):
            dataset = pq.ParquetDataset(file, filesystem=fs)
            df = pl.from_arrow(dataset.read())
            dfall = pl.concat((dfall, df)) if dfall is not None else df
    print(dfall) 
    return dfall
    

    
####################################################    
import os 
os.environ['AWS_ACCESS_KEY_ID'] = ""
os.environ['AWS_SECRET'].       = "" 

path_s3=""
    
  
df= pl_read_file_s3(path_s3, suffix=None,npool=2, dataset=False,show=0, nrows=1000000000, session=None,
                    lower_level=0, upper_level=0,**kw)  
print(df)  
  
